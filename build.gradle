/*
 * Forge Kotlin Adapter build file.
 */

//================================================
// Pre-execute

buildscript {
  ext.kotlin_version = '1.0.0-rc-1036'
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VER"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VER"
  }
}

repositories {
  maven {
    name 'Forge'
    url 'http://files.minecraftforge.net/maven'
  }
  mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: 'idea'

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VER"
  compile "net.minecraftforge:forge:$MC_VER-$FORGE_VER:universal"
  compile "org.apache.logging.log4j:log4j-api:$L4J2_VER"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VER"
}

//================================================
// Jar data

// Grab system env
def env = System.getenv()

  group = "io.drakon.forge"
  archivesBaseName = "kotlin-adapter"
  version = "$KOTLIN_VER+$MC_VER"

  // Drone manifest
  def droneManifest = manifest {
    if (env.DRONE != null) {
      attributes("Drone-Build": "true", "Drone-Build-ID": env.DRONE_BUILD_NUMBER, "Drone-Commit": env.DRONE_COMMIT,
          "Drone-Branch": env.DRONE_BRANCH, "Drone-Repo-Slug": env.DRONE_REPO_SLUG)
      version += "-d${env.DRONE_BUILD_NUMBER}"
    } else {
      attributes("Drone-Build": "false")
    }
  }

// Version manifest
def verManifest = manifest {
  attributes("Forge-Version": MC_VER + "-" + FORGE_VER, "Kotlin-Version": KOTLIN_VER)
}

//================================================
// Jar tasks

// Disable Javadoc doclint on JVM 1.8
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
      tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

jar {
  // Merge Jenkins and Git manifests to form final manifest in final release jar
  manifest {
    from droneManifest, verManifest
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}


//================================================
// Maven deployment
apply plugin: 'maven'

if (!project.hasProperty("DEPLOY_DIR")) {
  ext.DEPLOY_DIR = null
}

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: "file://$DEPLOY_DIR")
    }
  }
}

uploadArchives.onlyIf { return DEPLOY_DIR != null }
sourceSets {
  main.java.srcDirs += 'src/main/kotlin'
}
